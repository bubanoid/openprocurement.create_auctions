[buildout]
extends = versions.cfg
parts =
    put_auctions
    put_data_json

[auctions_info]
auction_type =
worker_directory_path =
auctions_number =
initial_number =
tender_id_base =
concurency =
time_offset =

[put_data_json]
template = ${auctions_info:auction_type}.json
recipe = collective.recipe.template[genshi]:genshi
input = ${buildout:directory}/templates/${:template}
output = ${buildout:directory}/data/${auctions_info:auction_type}.json

[put_data_values]
template = data.cfg
recipe = collective.recipe.template[genshi]:genshi
input = ${buildout:directory}/templates/${:template}
output = ${buildout:directory}/data/data.cfg

[put_auctions]
recipe = zc.recipe.egg:scripts
find-links = ${buildout:directory}/put_auctions_pkg/dist
eggs =
  put_auctions
;arguments = '${auctions_info:auction_type}', 'load-testing', worker_directory_path='${auctions_info:worker_directory_path}', tender_file_path='${put_data_json:output}', tender_id_base=str(${auctions_info:tender_id_base}), auctions_number=${auctions_info:auctions_number}, initial_number=${auctions_info:initial_number}, concurency=${auctions_info:concurency}, run_auction=False, start_time=${auctions_info:start_time}, time_offset=${auctions_info:time_offset}, wait_for_result=True
arguments = '${auctions_info:auction_type}', 'load-testing', worker_directory_path='${auctions_info:worker_directory_path}', tender_file_path='${put_data_json:output}', run_auction=False, wait_for_result=True, data='${put_data_values:output}'
entry-points = put_auctions_${auctions_info:auction_type}.py=put_auctions:main

[standard]

[insider]
dutch_steps =
auctions_number = ${auctions_info:auctions_number}
initial_number = ${auctions_info:initial_number}
tender_id_base = ${auctions_info:tender_id_base}
concurency = ${auctions_info:concurency}
start_time =
time_offset = ${auctions_info:time_offset}
bidders =

[esco]

[dgf]
